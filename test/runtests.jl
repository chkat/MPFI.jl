using MPFI
using Test

@testset "MPFI.jl" begin
    @test BigInterval("1.0") == BigInterval(BigFloat(1.0))
    @test MPFI.isbounded(BigInterval(1., Inf)) == false
    @test MPFI.isbounded(BigInterval(1., 1.)) == true
    @test MPFI.isbounded(BigInterval()) == false
    @test MPFI.isempty(BigInterval(2, -1)) == false
    @test MPFI.isempty(BigInterval()) == true
    @test MPFI.isnan(BigInterval(Inf)) == false
    @test MPFI.isnan(BigInterval()) == true
    @test MPFI.isinf(BigInterval(1.,Inf)) == true
    @test MPFI.isinf(BigInterval(0)) == false
    @test MPFI.has_zero(BigInterval(1,3)) == false
    @test MPFI.has_zero(BigInterval(1,-1)) == true
    @test MPFI.iszero(BigInterval(0,1)) == false
    @test MPFI.iszero(BigInterval(0,0)) == true
    @test MPFI.is_inside( BigInterval(2,4), BigInterval(1,4)) == true
    @test MPFI.is_inside( BigInterval(2.,4.1), BigInterval(1,4)) == false
    @test MPFI.blow(BigInterval(1,6),2.) == BigInterval(-4, 11)
    @test MPFI.bisect(BigInterval(1,6)) == (BigInterval(1.,3.5), BigInterval(3.5,6.))
    @test MPFI.mid(BigInterval(1,2)) == 1.5
    @test MPFI.isempty(MPFI.intersect(BigInterval(1.0, 2.0), BigInterval(-6,-5))) == true

    # Test mathematical constants
    @testset "Mathematical Constants" begin
        # Test π
        pi_interval = BigInterval(π)
        @test left(pi_interval) < 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129673659251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354021234078498193343210681701210056278802351930332247450158539047304199577770935036604169973297250886876966403655707739038125935
        @test right(pi_interval) > 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129673659251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354021234078498193343210681701210056278802351930332247450158539047304199577770935036604169973297250886876966403655707739038125935

        # Test ℯ
        e_interval = BigInterval(ℯ)
        @test left(e_interval) < 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354021234078498193343210681701210056278802351930332247450158539047304199577770935036604169973297250886876966403655707739038125935
        @test right(e_interval) > 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354021234078498193343210681701210056278802351930332247450158539047304199577770935036604169973297250886876966403655707739038125935

        # Test γ (Euler-Mascheroni constant)
        gamma_interval = BigInterval(γ)
        @test left(gamma_interval) < 0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495146314472498070824809605040144865428362241739976449235362535003337429373377376739427925952582470949160087352039481656708532331517766115286211995015079847937450857057400299213547861466940296043254215190587755352673313992540129674205137541395491116851028079842348775872050384310939973613744030644293114231458220298834863771752825421424788038451740347052937186559671013711002298864799629916849537417469027761036807554326995651603770337730208002071943249999677106245552710325490479696924263987980516840919243184864125732210795135031714364269907387005826363797424801583511835984899809071314172103797987506861200305688220818644839706115169177985441333474287488651296844365951595388730206419862420047121481807785399037113065552039863796408060609011464982582945068801798692633119030271107450739400165878865886114632079705518499562789175288791496366215553766635942312480265223012619399928563656209110205717898155222230007123892602809282690371703909663983459981786349677636561725736024981150237127580480056866198103874114491814419472986821749676554291211834982770398478804506197151413553058013605157854493629674024454437298522172817480621830625915869771866294127319710206459627166754022660812237701318169008075353217569418228006881333297852553623253983271164666392936572129864633186703451860330216461912467491927819113933119288325823114190914927847467026820173984883014566866086857218747159002119987295235365845662011761249799152704597534187275180758565569685042355856348021286370422400716896091783795854808265674845320037177729210352330779491921913596079797490598258228706488892164625703338410516
        @test right(gamma_interval) > 0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495146314472498070824809605040144865428362241739976449235362535003337429373377376739427925952582470949160087352039481656708532331517766115286211995015079847937450857057400299213547861466940296043254215190587755352673313992540129674205137541395491116851028079842348775872050384310939973613744030644293114231458220298834863771752825421424788038451740347052937186559671013711002298864799629916849537417469027761036807554326995651603770337730208002071943249999677106245552710325490479696924263987980516840919243184864125732210795135031714364269907387005826363797424801583511835984899809071314172103797987506861200305688220818644839706115169177985441333474287488651296844365951595388730206419862420047121481807785399037113065552039863796408060609011464982582945068801798692633119030271107450739400165878865886114632079705518499562789175288791496366215553766635942312480265223012619399928563656209110205717898155222230007123892602809282690371703909663983459981786349677636561725736024981150237127580480056866198103874114491814419472986821749676554291211834982770398478804506197151413553058013605157854493629674024454437298522172817480621830625915869771866294127319710206459627166754022660812237701318169008075353217569418228006881333297852553623253983271164666392936572129864633186703451860330216461912467491927819113933119288325823114190914927847467026820173984883014566866086857218747159002119987295235365845662011761249799152704597534187275180758565569685042355856348021286370422400716896091783795854808265674845320037177729210352330779491921913596079797490598258228706488892164625703338410516
    end
end
